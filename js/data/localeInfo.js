// Copyright 2015-2019, University of Colorado Boulder

/**
 * Locale information for all locales that we support
 *
 * Auto-generated by ExportPhetcommonLocales.java. We have decided that we will not auto-generate this file again,
 * so it is okay to modify this file if things need to be corrected or added.
 *
 * language codes are ISO 639-1, see http://en.wikipedia.org/wiki/List_of_ISO_639-1_codes
 * country codes are ISO 3166-1 alpha2, see http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
 *
 * NOTE: We are using an older version of ISO 639-1 because java.util.Locale maps some of the newer language codes to
 * older codes. See Locale.convertOldISOCodes.
 * The affected country codes are:
 * he -> iw (Hebrew)
 * yi -> ji (Yiddish)
 * id -> in (Indonesian)
 *
 * ALSO NOTE: We had a request to support Lakota, which is not included in ISO 639-1, and is only defined as a three-
 * letter code in ISO 639-3.  The locale combination 'lk' was not taken in ISO 639-1, so we added it.  Strictly
 * speaking, this is a deviation from the spec.
 */

/* eslint-env browser, node */
'use strict';

const fs = require( 'fs' );

(function( global ) {

  const locales = JSON.parse( fs.readFileSync( '../chipper/data/localeInfo.json' ).toString() );

  // browser require.js-compatible definition
  global.define && global.define( function() {
    return locales;
  } );

  // Node.js-compatible definition
  if ( typeof module !== 'undefined' ) {
    module.exports = locales;
  }
})( ( 1, eval )( 'this' ) );
// Indirect eval usage done since babel likes to wrap things in strict mode.
// See http://perfectionkills.com/unnecessarily-comprehensive-look-into-a-rather-insignificant-issue-of-global-objects-creation/#ecmascript_5_strict_mode
